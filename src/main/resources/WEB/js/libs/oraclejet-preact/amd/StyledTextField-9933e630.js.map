{"version":3,"file":"StyledTextField-9933e630.js","sources":["../../src/UNSAFE_TextField/ReadonlyTextFieldContent.tsx","../../src/UNSAFE_TextField/ReadonlyTextField.tsx","../../src/UNSAFE_TextField/StyledTextField.tsx"],"sourcesContent":["import { ComponentChildren, Ref } from 'preact';\n\nimport { useComponentTheme } from '../hooks/UNSAFE_useComponentTheme';\nimport { useFormContext } from '../hooks/UNSAFE_useFormContext';\nimport { useFormFieldContext } from '../hooks/UNSAFE_useFormFieldContext';\nimport { Flex } from '../UNSAFE_Flex';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { useInputGroupContext } from '../hooks/UNSAFE_useInputGroupContext';\nimport { useUser } from '../hooks/UNSAFE_useUser';\nimport { TextFieldStyles, TextFieldVariantOptions } from './themes/TextFieldStyles.css';\nimport { TextFieldRedwoodTheme } from './themes/redwood/TextFieldTheme';\nimport {\n  ReadonlyTextFieldVariantOptions,\n  styles as readonlyStyles\n} from './themes/ReadonlyTextFieldStyles.css';\nimport { ReadonlyTextFieldRedwoodTheme } from './themes/redwood/ReadonlyTextFieldTheme';\n\ntype VariantProps = {\n  variant?: 'textarea';\n};\n\ntype Props = VariantProps & {\n  mainContent?: ComponentChildren;\n  insideLabel?: ComponentChildren;\n  endContent?: ComponentChildren;\n  rootRef?: Ref<HTMLDivElement>;\n  hasZeroStartMargin?: boolean;\n};\n\n// Renders the oj-text-field-container dom which includes the\n// main (where the inside label and inputElem goes),\n// and end pieces of the form component.\n// This does not include user assistance because that is rendered outside the\n// oj-text-field-container; that is rendered in the TextField component.\nexport const ReadonlyTextFieldContent = ({\n  variant,\n  insideLabel,\n  mainContent,\n  endContent,\n  rootRef\n}: Props) => {\n  const { isFormLayout, isReadonly: isReadonlyForm } = useFormContext();\n  const { isLoading } = useFormFieldContext();\n  const { direction } = useUser();\n  const isLtr = direction === 'ltr';\n  const isInsideNonReadonlyForm = isFormLayout && !isReadonlyForm;\n  const hasInsideLabel = insideLabel !== undefined;\n  const inputGroupContext = useInputGroupContext();\n  const hasGroupContext = inputGroupContext !== null;\n  // depending on browser direction, apply the appropriate styling.\n  // when 'rtl' the flex row direction is reversed.\n  const inputGroupPosition = inputGroupContext\n    ? inputGroupContext.last\n      ? isLtr\n        ? 'groupRight'\n        : 'groupLeft'\n      : inputGroupContext.index === 0\n      ? isLtr\n        ? 'groupLeft'\n        : 'groupRight'\n      : 'groupMiddle'\n    : undefined;\n\n  const { variantClasses: middleStyles } = useComponentTheme<TextFieldVariantOptions>(\n    TextFieldRedwoodTheme,\n    { middleContent: variant }\n  );\n  const { variantClasses: endContentStyles } = useComponentTheme<TextFieldVariantOptions>(\n    TextFieldRedwoodTheme,\n    { endContent: hasInsideLabel ? 'hasInsideLabel' : 'noInsideLabel' }\n  );\n\n  const { classes: readonlyClassNames } = useComponentTheme<\n    ReadonlyTextFieldVariantOptions,\n    TextFieldStyles\n  >(ReadonlyTextFieldRedwoodTheme, {\n    insideNonReadonlyForm: isInsideNonReadonlyForm\n      ? 'isInsideNonReadonlyForm'\n      : 'notInsideNonReadonlyForm',\n    insideLabel: hasInsideLabel ? 'hasInsideLabel' : 'noInsideLabel',\n    textarea: variant === 'textarea' ? 'isTextArea' : 'notTextArea',\n    loading: isLoading ? 'isLoading' : 'notLoading',\n    withinGroup: hasGroupContext ? 'isWithinGroup' : undefined,\n    inputGroupPosition\n  });\n\n  const {\n    readonlyTextFieldMiddleBase,\n    readonlyTextFieldMiddleNotInEnabledForm,\n    readonlyTextFieldMiddleInEnabledForm,\n    readonlyTextFieldMiddleInEnabledFormNotTextarea\n  } = readonlyStyles;\n\n  const middleClasses = classNames([\n    middleStyles,\n    readonlyTextFieldMiddleBase,\n    isInsideNonReadonlyForm && readonlyTextFieldMiddleInEnabledForm,\n    isInsideNonReadonlyForm &&\n      variant !== 'textarea' &&\n      readonlyTextFieldMiddleInEnabledFormNotTextarea,\n    !isInsideNonReadonlyForm && readonlyTextFieldMiddleNotInEnabledForm\n  ]);\n\n  return (\n    <div role=\"presentation\" class={readonlyClassNames} ref={rootRef}>\n      <div class={middleClasses}>\n        {insideLabel}\n        {mainContent}\n      </div>\n      {endContent && (\n        <span class={endContentStyles}>\n          <Flex justify=\"center\" align=\"center\" hasZeroMargins={true}>\n            {endContent}\n          </Flex>\n        </span>\n      )}\n    </div>\n  );\n};\n","import { ComponentChildren, ComponentProps, Ref } from 'preact';\nimport { forwardRef } from 'preact/compat';\nimport { LabelValueLayout } from '../UNSAFE_LabelValueLayout';\nimport { StyledComponentProps } from '../utils/UNSAFE_typeUtils';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { Size } from '../utils/UNSAFE_size';\nimport { HTMLAttributesSignalExcluded } from '../utils/UNSAFE_attributeUtils';\nimport { useComponentTheme } from '../hooks/UNSAFE_useComponentTheme';\nimport { TextFieldRedwoodTheme } from './themes/redwood/TextFieldTheme';\nimport { LabelRedwoodTheme } from '../UNSAFE_Label/themes/redwood/LabelTheme';\nimport { FormLayoutRedwoodTheme } from './themes/redwood/FormLayoutTheme';\nimport { type TestIdProps, useTestId } from '#hooks/UNSAFE_useTestId';\nimport { layoutSpanStyles, LayoutColumnSpan } from '../utils/UNSAFE_styles/Layout';\nimport { ReadonlyTextFieldContent } from './ReadonlyTextFieldContent';\n\ntype DivProps = HTMLAttributesSignalExcluded<HTMLDivElement>;\ntype UAProps = {\n  compactUserAssistance?: ComponentChildren;\n  inlineUserAssistance?: ComponentChildren;\n};\ntype OuterClassNamesProps = {\n  outerClassNames?: string;\n};\ntype PickedPropsFromReadonlyTextFieldContent = Pick<\n  ComponentProps<typeof ReadonlyTextFieldContent>,\n  'variant' | 'mainContent' | 'endContent'\n>;\n\ntype StartTopLabelReadonlyTextFieldProps = Omit<DivProps, 'label'> &\n  UAProps &\n  PickedPropsFromReadonlyTextFieldContent &\n  OuterClassNamesProps & {\n    label?: ComponentChildren;\n    labelEdge?: 'start' | 'top';\n    labelStartWidth?: Size;\n    rootRef?: Ref<HTMLDivElement>;\n  };\n\nconst StartTopLabelReadonlyTextField = forwardRef(\n  (\n    {\n      outerClassNames,\n      label,\n      labelEdge,\n      labelStartWidth,\n      compactUserAssistance,\n      inlineUserAssistance,\n      mainContent,\n      endContent,\n      rootRef,\n      variant,\n      ...props\n    }: StartTopLabelReadonlyTextFieldProps,\n    ref?: Ref<HTMLDivElement>\n  ) => {\n    const parentComponentVariant = variant === 'textarea' ? 'textArea' : 'textField';\n    return (\n      <div {...props} ref={ref} class={outerClassNames}>\n        {compactUserAssistance}\n        <LabelValueLayout\n          label={label}\n          labelEdge={labelEdge}\n          labelStartWidth={labelStartWidth}\n          parentComponentVariant={parentComponentVariant}>\n          <ReadonlyTextFieldContent\n            mainContent={mainContent}\n            endContent={endContent}\n            rootRef={rootRef}\n            variant={variant}\n          />\n        </LabelValueLayout>\n        {inlineUserAssistance}\n      </div>\n    );\n  }\n);\n\ntype InsideLabelReadonlyTextFieldProps = Omit<DivProps, 'label'> &\n  UAProps &\n  PickedPropsFromReadonlyTextFieldContent &\n  OuterClassNamesProps & {\n    label?: ComponentChildren;\n    rootRef?: Ref<HTMLDivElement>;\n  };\nconst InsideLabelReadonlyTextField = forwardRef(\n  (\n    {\n      outerClassNames,\n      compactUserAssistance,\n      inlineUserAssistance,\n      mainContent,\n      endContent,\n      label,\n      rootRef,\n      variant,\n      ...props\n    }: InsideLabelReadonlyTextFieldProps,\n    ref?: Ref<HTMLDivElement>\n  ) => {\n    return (\n      <div {...props} ref={ref} class={outerClassNames}>\n        {compactUserAssistance}\n        <ReadonlyTextFieldContent\n          insideLabel={label}\n          mainContent={mainContent}\n          endContent={endContent}\n          rootRef={rootRef}\n          variant={variant}\n        />\n        {inlineUserAssistance}\n      </div>\n    );\n  }\n);\n\nexport type StyleProps = UAProps &\n  PickedPropsFromReadonlyTextFieldContent & {\n    columnSpan?: LayoutColumnSpan;\n    label?: ComponentChildren;\n    labelEdge?: 'inside' | 'start' | 'top';\n    variant?: 'textarea';\n    mainFieldRef?: Ref<HTMLDivElement>;\n  };\n\ntype Props = TestIdProps & StyledComponentProps<'div', StyleProps>;\n\nexport const ReadonlyTextField = forwardRef(\n  (\n    {\n      columnSpan = 1,\n      label,\n      labelEdge,\n      mainContent,\n      endContent,\n      variant,\n      mainFieldRef,\n      testId,\n      ...props\n    }: Props,\n    ref?: Ref<HTMLElement>\n  ) => {\n    const testIdProps = useTestId(testId);\n    const { classes, styles } = useComponentTheme(TextFieldRedwoodTheme, {\n      readonly: 'isReadonly'\n    });\n    const { baseTheme: labelBaseTheme } = useComponentTheme(LabelRedwoodTheme);\n    const { baseTheme: formLayoutTheme } = useComponentTheme(FormLayoutRedwoodTheme);\n\n    const { formControlBase } = styles;\n    const outerClassNames = classNames([\n      classes,\n      formControlBase,\n      formLayoutTheme,\n      labelBaseTheme,\n      layoutSpanStyles.layoutSpanColumn[columnSpan]\n    ]);\n\n    if (label !== undefined && (labelEdge === 'start' || labelEdge === 'top')) {\n      return (\n        <StartTopLabelReadonlyTextField\n          outerClassNames={outerClassNames}\n          label={label}\n          labelEdge={labelEdge}\n          ref={ref as Ref<HTMLDivElement> | undefined}\n          mainContent={mainContent}\n          endContent={endContent}\n          rootRef={mainFieldRef}\n          variant={variant}\n          {...props}\n          {...testIdProps}></StartTopLabelReadonlyTextField>\n      );\n    }\n\n    return (\n      <InsideLabelReadonlyTextField\n        outerClassNames={outerClassNames}\n        ref={ref as Ref<HTMLDivElement> | undefined}\n        label={label}\n        mainContent={mainContent}\n        endContent={endContent}\n        rootRef={mainFieldRef}\n        variant={variant}\n        {...props}\n        {...testIdProps}></InsideLabelReadonlyTextField>\n    );\n  }\n);\n","import { Ref } from 'preact';\nimport { forwardRef } from 'preact/compat';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { StyledComponentProps } from '../utils/UNSAFE_typeUtils';\nimport { useFormFieldContext } from '../hooks/UNSAFE_useFormFieldContext';\nimport { useComponentTheme } from '../hooks/UNSAFE_useComponentTheme';\nimport { TextFieldStyles, TextFieldVariantOptions } from './themes/TextFieldStyles.css';\nimport { useInputGroupContext } from '../hooks/UNSAFE_useInputGroupContext';\nimport { FormLayoutRedwoodTheme } from './themes/redwood/FormLayoutTheme';\nimport { LabelRedwoodTheme } from '../UNSAFE_Label/themes/redwood/LabelTheme';\nimport { TextFieldRedwoodTheme } from './themes/redwood/TextFieldTheme';\nimport { SkeletonRedwoodTheme } from '../UNSAFE_Skeleton/themes/redwood/SkeletonTheme';\nimport { layoutSpanStyles, LayoutColumnSpan } from '../utils/UNSAFE_styles/Layout';\n\nexport type StyleProps = {\n  columnSpan?: LayoutColumnSpan;\n  hasInsideLabel?: boolean;\n  variant?: 'default' | 'embedded';\n};\ntype Props = StyledComponentProps<'div', StyleProps>;\n\nexport const StyledTextField = forwardRef(\n  ({ columnSpan = 1, hasInsideLabel = false, variant = 'default', ...props }: Props, ref?: Ref<HTMLElement>) => {\n    // because of the mismatch of height for inputs with inside labels and no labels,\n    // we'll have to set everything to the same min-height while within an input group context.\n    // Here we'll look to see if it's present and apply the style as needed\n    const groupContext = useInputGroupContext();\n    const { isReadonly } = useFormFieldContext();\n    const { baseTheme: formLayoutTheme } = useComponentTheme(FormLayoutRedwoodTheme);\n    const { baseTheme: labelBaseTheme } = useComponentTheme(LabelRedwoodTheme);\n    const { classes: textFieldClasses, styles } = useComponentTheme<\n      TextFieldVariantOptions,\n      TextFieldStyles\n    >(TextFieldRedwoodTheme, {\n      readonly: isReadonly ? 'isReadonly' : 'notReadonly',\n      formControlInsideLabel: hasInsideLabel ? 'hasInsideLabel' : 'noInsideLabel',\n      withinGroup: groupContext !== null ? 'isWithinGroup' : undefined\n    });\n\n    const { formControlBase, textFieldBase, textFieldEmbedded } = styles;\n\n    // because TextField components reference Skeleton scoped vars, we need to bring in the Skeleton base theme\n    // to pick up the scoped var definitions.\n    const { baseTheme: skeletonBaseTheme } = useComponentTheme(SkeletonRedwoodTheme);\n\n    const classes = classNames([\n      skeletonBaseTheme,\n      formControlBase,\n      textFieldBase,\n      variant === 'embedded' && textFieldEmbedded,\n      textFieldClasses,\n      formLayoutTheme,\n      labelBaseTheme,\n      layoutSpanStyles.layoutSpanColumn[columnSpan]\n    ]);\n\n    return <div {...props} class={classes} ref={ref as Ref<HTMLDivElement> | undefined} />;\n  }\n);\n"],"names":["ReadonlyTextFieldContent","variant","insideLabel","mainContent","endContent","rootRef","isFormLayout","isReadonly","isReadonlyForm","useFormContext","isLoading","useFormFieldContext","direction","useUser","isLtr","isInsideNonReadonlyForm","hasInsideLabel","undefined","inputGroupContext","useInputGroupContext","hasGroupContext","inputGroupPosition","last","index","variantClasses","middleStyles","useComponentTheme","TextFieldRedwoodTheme","middleContent","endContentStyles","classes","readonlyClassNames","ReadonlyTextFieldRedwoodTheme","insideNonReadonlyForm","textarea","loading","withinGroup","readonlyTextFieldMiddleBase","readonlyTextFieldMiddleNotInEnabledForm","readonlyTextFieldMiddleInEnabledForm","readonlyTextFieldMiddleInEnabledFormNotTextarea","readonlyStyles","middleClasses","classNames","_jsxs","jsxs","role","class","ref","children","_jsx","jsx","Flex","justify","align","hasZeroMargins","StartTopLabelReadonlyTextField","forwardRef","outerClassNames","label","labelEdge","labelStartWidth","compactUserAssistance","inlineUserAssistance","props","parentComponentVariant","LabelValueLayout","InsideLabelReadonlyTextField","ReadonlyTextField","columnSpan","mainFieldRef","testId","testIdProps","useTestId","styles","readonly","baseTheme","labelBaseTheme","LabelRedwoodTheme","formLayoutTheme","FormLayoutRedwoodTheme","formControlBase","layoutSpanStyles","layoutSpanColumn","StyledTextField","groupContext","textFieldClasses","formControlInsideLabel","textFieldBase","textFieldEmbedded","skeletonBaseTheme","SkeletonRedwoodTheme"],"mappings":"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"}