{"version":3,"file":"TabBarItem-c7b1c147.js","sources":["../../src/UNSAFE_TabBarCommon/useTabBarItemTooltip.ts","../../src/UNSAFE_TabBarCommon/BaseTabBarItem.tsx","../../src/UNSAFE_TabBarCommon/TabBarItem.tsx"],"sourcesContent":["import { ComponentChild } from 'preact';\nimport { useState } from 'preact/hooks';\nimport { useTooltipControlled } from '../hooks/UNSAFE_useTooltip';\n\ntype Props = {\n  label: string;\n  isDisabled: boolean;\n};\n\nexport const useTabBarItemTooltip = ({\n  label,\n  isDisabled\n}: Props): {\n  tooltipContent: ComponentChild;\n  tooltipEventHandlerProps: Record<string, any>;\n  onLogicalFocus: (elem: HTMLElement) => void;\n  onLogicalBlur: () => void;\n} => {\n  const [isOpen, setOpen] = useState<boolean>(false);\n  const { tooltipProps, tooltipContent } = useTooltipControlled({\n    isOpen: isOpen,\n    isDisabled,\n    focusStrategy: 'logical',\n    text: label,\n    onToggle: ({ value }) => {\n      setOpen(value);\n    }\n  });\n  const { onLogicalFocus, onLogicalBlur, ...tooltipEventHandlerProps } = tooltipProps;\n\n  return { tooltipContent, tooltipEventHandlerProps, onLogicalFocus, onLogicalBlur };\n};\n","import { ComponentChildren, ComponentChild } from 'preact';\nimport { useCallback } from 'preact/hooks';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { usePress } from '../hooks/UNSAFE_usePress';\nimport { useUser } from '../hooks/UNSAFE_useUser';\nimport { Text } from '../UNSAFE_Text';\nimport { Flex } from '../UNSAFE_Flex';\nimport { useTabBarContext } from './useTabBarContext';\nimport { mergeInterpolations } from '../utils/UNSAFE_mergeInterpolations';\nimport { flexitemInterpolations } from '../utils/UNSAFE_interpolations/flexitem';\nimport type { FlexitemProps } from '../utils/UNSAFE_interpolations/flexitem';\nimport { useComponentTheme } from '../hooks/UNSAFE_useComponentTheme';\nimport { useConveyorBeltItem } from '../UNSAFE_ConveyorBelt/useConveyorBeltItem';\nimport { TabBarItemVariantOptions } from './themes/TabBarItemStyles.css';\nimport { TabBarItemRedwoodTheme } from './themes/redwood/TabBarItemTheme';\nimport { Badge } from '../UNSAFE_Badge';\nimport { WarningS } from '../UNSAFE_RedwoodIcons/WarningS';\nimport { ErrorS } from '../UNSAFE_RedwoodIcons/ErrorS';\nimport { InformationS } from '../UNSAFE_RedwoodIcons/InformationS';\nimport { SuccessS } from '../UNSAFE_RedwoodIcons/SuccessS';\nimport { mergeProps } from '../utils/UNSAFE_mergeProps';\nimport { useTabBarItemTooltip } from './useTabBarItemTooltip';\n\ntype Severity = 'warning' | 'info' | 'none' | 'error' | 'confirmation';\n\ntype AriaProps = {\n  /**\n   * Accepts the tabpanel element's ID associated with the tab item\n   **/\n  'aria-controls'?: string;\n};\n\nexport type BaseTabBarItemProps<K extends string | number> = {\n  /**\n   * Key of the TabBarItem\n   */\n  itemKey: K;\n  /**\n   * Label of the TabBarItem. For icon only display this label is the content\n   * for aria-label and tooltip text of the Tab.\n   */\n  label: string;\n  /**\n   * The icon before the label in non-stack case, icon above the label in\n   * stacked case or the stand alone icon when no label is specified.\n   */\n  icon?: ComponentChild;\n  /**\n   * The content to be rendered inside the Badge component.\n   */\n  badge?: string;\n  /**\n   * The content to be rendered inside the Text component as a metadata,\n   * that appears after the label in non stack case only.\n   */\n  metadata?: string;\n  /**\n   * The status icon to be rendered after the label in non stack case only.\n   */\n  severity?: Severity;\n  /**\n   * The content to be rendered for remove icon\n   */\n  removeIcon?: ComponentChildren;\n  /**\n   * The control for enabling and disabling focusRing\n   */\n  showFocusRingOverride?: boolean;\n  /**\n   * The control for enabling and disabling tooltip\n   */\n  showTooltipOverride?: boolean;\n  /**\n   * The control for enabling and disabling selection indicator\n   */\n  selectionOverride?: boolean;\n  /**\n   * The control for overriding display value.\n   */\n  displayOverride?: string;\n} & AriaProps;\n\nexport function BaseTabBarItem<K extends string | number>({\n  itemKey,\n  label,\n  icon,\n  badge,\n  metadata,\n  severity = 'none',\n  removeIcon,\n  showFocusRingOverride,\n  showTooltipOverride,\n  selectionOverride,\n  displayOverride,\n  'aria-controls': ariaControls\n}: BaseTabBarItemProps<K>) {\n  const {\n    onSelect,\n    selection,\n    currentKey,\n    showFocusRing,\n    hideTooltip,\n    layout,\n    display,\n    size,\n    isEdgeBottom,\n    tabItemPrefix\n  } = useTabBarContext();\n\n  const isCurrent = currentKey === itemKey;\n\n  const { ref, ...conveyorBeltProps } = useConveyorBeltItem({ isCurrent });\n\n  //Selection\n  //Dependency on currentKey because upon removal selectionChange does not change hence no re render\n  //and it is still holding the deleted key as selection\n  const handlePress = useCallback(() => {\n    onSelect?.({ value: itemKey as K });\n  }, [itemKey, onSelect]);\n\n  const { pressProps } = usePress(handlePress);\n\n  const isSelected = selection === itemKey;\n\n  const isStacked = display === 'stacked' ? true : false;\n  const isIconOnly =\n    display === 'icons' || (displayOverride && displayOverride === 'icons') ? true : false;\n  const isTall = size === 'lg' ? true : false;\n  const labelRequirement = label && !(label === ' ' || label === undefined);\n  const severityRequirement = !(severity === 'none' || severity === undefined);\n\n  const IconComponent = (severityValue: Severity) => {\n    switch (severityValue) {\n      case 'error':\n        return <ErrorS color=\"danger\" />;\n      case 'warning':\n        return <WarningS color=\"warning\" />;\n      case 'info':\n        return <InformationS color=\"info\" />;\n      case 'confirmation':\n        return <SuccessS color=\"success\" />;\n      default:\n        return null;\n    }\n  };\n\n  const showTooltip = isIconOnly && showTooltipOverride !== false;\n  const { tooltipContent, tooltipEventHandlerProps, onLogicalFocus, onLogicalBlur } =\n    useTabBarItemTooltip({ label, isDisabled: !showTooltip });\n  if (showTooltip) {\n    if (isCurrent && showFocusRing && !hideTooltip) {\n      onLogicalFocus(ref.current as HTMLElement);\n    } else if (!isCurrent || (isCurrent && !showFocusRing) || hideTooltip) {\n      onLogicalBlur();\n    }\n  }\n\n  const { direction } = useUser();\n  const makeFocusRingVisible =\n    showFocusRingOverride !== undefined ? showFocusRingOverride : showFocusRing;\n  const makeSelectionVisible = selectionOverride !== undefined ? selectionOverride : isSelected;\n\n  const {\n    classes,\n    styles: {\n      tabBarItemIcon,\n      tabBarItemIconStacked,\n      tabBarItemMetadata,\n      tabBarItemStackedBadge,\n      tabBarItemStackedBadgeRtl,\n      tabBarItemRemoveIcon\n    }\n  } = useComponentTheme<TabBarItemVariantOptions>(TabBarItemRedwoodTheme, {\n    selection: makeSelectionVisible ? 'isSelected' : 'notSelected',\n    current: isCurrent ? 'isCurrent' : 'notCurrent',\n    focusRing: makeFocusRingVisible ? 'showFocusRing' : 'noFocusRing',\n    edgeBottom: isEdgeBottom ? 'isBottom' : 'notBottom'\n  });\n\n  const tabBarItem = classNames([classes]);\n  const tabBarItemIconClasses = classNames([\n    tabBarItemIcon,\n    (isStacked || isIconOnly || !labelRequirement) && tabBarItemIconStacked\n  ]);\n  const tabBarItemMetadataClasses = classNames([tabBarItemMetadata]);\n  const tabBarItemStackedBadgeClasses = classNames([\n    tabBarItemStackedBadge,\n    direction === 'rtl' && tabBarItemStackedBadgeRtl\n  ]);\n  const removeClass = classNames([tabBarItemRemoveIcon]);\n\n  //instead of specifying flex: '1 0 auto' in cssProps var\n  const styleInterpolations = mergeInterpolations<FlexitemProps>([\n    ...Object.values(flexitemInterpolations)\n  ]);\n  const flexDimensions = styleInterpolations({\n    flex: layout === 'stretch' ? '1 0 auto' : '0 0 auto'\n  });\n\n  return (\n    <div\n      data-oj-key={itemKey}\n      data-oj-removable={removeIcon ? 'true' : undefined}\n      id={tabItemPrefix + itemKey}\n      class={tabBarItem}\n      ref={ref}\n      role=\"tab\"\n      aria-controls={ariaControls}\n      aria-selected={isSelected}\n      {...mergeProps(pressProps, tooltipEventHandlerProps, conveyorBeltProps)}\n      style={flexDimensions}>\n      <Flex\n        minWidth=\"10.5x\"\n        minHeight={isTall ? '14.5x' : '100%'}\n        height={isStacked && labelRequirement ? '18.5x' : '10.5x'}\n        gap=\"2x\"\n        flex=\"1 1 auto\">\n        <Flex\n          direction={isStacked && labelRequirement ? 'column' : 'row'}\n          gap=\"2x\"\n          align=\"center\"\n          justify=\"center\"\n          flex=\"1 1 auto\">\n          {(isStacked || isIconOnly || (!labelRequirement && icon)) && (\n            <div class={tabBarItemIconClasses}>\n              {icon}\n              <span class={tabBarItemStackedBadgeClasses}>\n                {badge ? (\n                  <Badge size=\"xs\" variant=\"neutral\">\n                    {badge}\n                  </Badge>\n                ) : null}\n              </span>\n            </div>\n          )}\n          {((!isIconOnly && labelRequirement) ||\n            metadata ||\n            severityRequirement ||\n            removeIcon ||\n            (icon && labelRequirement && !isStacked && !isIconOnly)) && (\n            <Flex gap=\"2x\" align=\"center\" justify=\"center\">\n              {!isIconOnly && !isStacked && icon && labelRequirement && (\n                <span class={tabBarItemIconClasses}>{icon}</span>\n              )}\n              {!isIconOnly && labelRequirement && (\n                <Text size=\"md\" weight=\"semiBold\">\n                  {label}\n                </Text>\n              )}\n              {!isStacked && !isIconOnly && badge && labelRequirement && (\n                <Badge size=\"md\" variant=\"neutralSubtle\">\n                  {badge}\n                </Badge>\n              )}\n              {metadata && (\n                <span class={tabBarItemMetadataClasses}>\n                  <Text>{'( ' + metadata + ' )'}</Text>\n                </span>\n              )}\n              {severityRequirement && (\n                <span class={tabBarItemIconClasses}>{IconComponent(severity)}</span>\n              )}\n            </Flex>\n          )}\n        </Flex>\n        {removeIcon && <span class={removeClass}>{removeIcon}</span>}\n      </Flex>\n      {tooltipContent}\n    </div>\n  );\n}\n","import { BaseTabBarItem, BaseTabBarItemProps } from './BaseTabBarItem';\n\nexport type TabBarItemProps<K extends string | number> = Pick<\n  BaseTabBarItemProps<K>,\n  'itemKey' | 'label' | 'icon' | 'badge' | 'metadata' | 'severity' | 'aria-controls'\n>;\n\nexport function TabBarItem<K extends string | number>({\n  itemKey,\n  label,\n  icon,\n  badge,\n  metadata,\n  severity,\n  'aria-controls': ariaControls\n}: TabBarItemProps<K>) {\n  return (\n    <BaseTabBarItem\n      aria-controls={ariaControls}\n      itemKey={itemKey}\n      label={label}\n      icon={icon}\n      badge={badge}\n      metadata={metadata}\n      severity={severity}\n    />\n  );\n}\n"],"names":["useTabBarItemTooltip","label","isDisabled","isOpen","setOpen","useState","tooltipProps","tooltipContent","useTooltipControlled","focusStrategy","text","onToggle","value","onLogicalFocus","onLogicalBlur","tooltipEventHandlerProps","BaseTabBarItem","itemKey","icon","badge","metadata","severity","removeIcon","showFocusRingOverride","showTooltipOverride","selectionOverride","displayOverride","ariaControls","onSelect","selection","currentKey","showFocusRing","hideTooltip","layout","display","size","isEdgeBottom","tabItemPrefix","useTabBarContext","isCurrent","ref","conveyorBeltProps","useConveyorBeltItem","handlePress","useCallback","pressProps","usePress","isSelected","isStacked","isIconOnly","isTall","labelRequirement","undefined","severityRequirement","showTooltip","current","direction","useUser","makeFocusRingVisible","makeSelectionVisible","classes","styles","tabBarItemIcon","tabBarItemIconStacked","tabBarItemMetadata","tabBarItemStackedBadge","tabBarItemStackedBadgeRtl","tabBarItemRemoveIcon","useComponentTheme","TabBarItemRedwoodTheme","focusRing","edgeBottom","tabBarItem","classNames","tabBarItemIconClasses","tabBarItemMetadataClasses","tabBarItemStackedBadgeClasses","removeClass","flexDimensions","mergeInterpolations","Object","values","flexitemInterpolations","styleInterpolations","flex","_jsxs","id","class","role","mergeProps","style","children","Flex","minWidth","minHeight","height","gap","jsxs","align","justify","_jsx","Badge","variant","jsx","Text","weight","severityValue","ErrorS","SvgErrorS","color","WarningS","SvgWarningS","InformationS","SvgInformationS","SuccessS","SvgSuccessS","IconComponent"],"mappings":"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"}