{"version":3,"file":"CheckboxRadioField-48d4dc4e.js","sources":["../../src/PRIVATE_CheckboxRadioField/CheckboxRadioLabelValueLayout.tsx","../../src/PRIVATE_CheckboxRadioField/CheckboxRadioField.tsx"],"sourcesContent":["import { ComponentChildren, JSX } from 'preact';\n\nimport { classNames } from '#utils/UNSAFE_classNames';\nimport { useFormContext } from '#hooks/UNSAFE_useFormContext';\nimport { useFormFieldContext } from '#hooks/UNSAFE_useFormFieldContext';\nimport { sizeToCSS, Size } from '#utils/UNSAFE_size';\nimport { useComponentTheme } from '#hooks/UNSAFE_useComponentTheme';\nimport { RadioRedwoodTheme } from '#UNSAFE_RadioItem/themes/redwood/RadioTheme';\nimport { LabelRedwoodTheme } from '#UNSAFE_Label/themes/redwood/LabelTheme';\nimport { FormLayoutRedwoodTheme } from '#UNSAFE_TextField/themes/redwood/FormLayoutTheme';\nimport { CheckboxRedwoodTheme } from '#UNSAFE_Checkbox/themes/redwood/CheckboxTheme';\nimport {\n  labelSlotStyles,\n  labelInnerStyles\n} from '#UNSAFE_LabelValueLayout/LabelValueLayoutStyles.css';\nimport { StyledLabelValueLayout } from '#UNSAFE_LabelValueLayout/StyledLabelValueLayout';\nimport { checkboxRadioLabelInnerStyles } from './CheckboxRadioLabelValueLayoutStyles.css';\n\ntype Props = {\n  /**\n   * Defines how the label is going to be positioned. For CheckboxSet or RadioSet the start, top and inside values are supported.\n   */\n  labelEdge?: 'start' | 'top' | 'inside';\n  /**\n   * Specifies if the parent component is a CheckboxSet or RadioSet\n   */\n  parentComponentVariant: 'radioSet' | 'checkboxSet';\n  /**\n   * Specifies if there is assistive text or links at the top of the component below the label\n   */\n  hasTopUserAssistance?: boolean;\n  /**\n   * Label content of the layout\n   */\n  label?: ComponentChildren;\n  /**\n   * Defines the label width for labelEdge 'start' ('top' is always 100%)\n   */\n  labelStartWidth?: Size;\n  /**\n   * Value content of the layout\n   */\n  children: ComponentChildren;\n};\n\n/**\n * A layout component for rendering a label and value pair, used in form components\n * such as CheckboxSet and RadioSet.\n */\nexport const CheckboxRadioLabelValueLayout = ({\n  label,\n  labelEdge,\n  children,\n  parentComponentVariant,\n  labelStartWidth = '33%',\n  hasTopUserAssistance = false\n}: Props) => {\n  const { baseTheme: radioTheme } = useComponentTheme(RadioRedwoodTheme);\n  const { baseTheme: checkboxTheme } = useComponentTheme(CheckboxRedwoodTheme);\n  const { baseTheme: labelTheme } = useComponentTheme(LabelRedwoodTheme);\n  const { baseTheme: formLayoutTheme } = useComponentTheme(FormLayoutRedwoodTheme);\n\n  const isRadio = parentComponentVariant === 'radioSet';\n  const isCheckbox = parentComponentVariant === 'checkboxSet';\n  const isStart = labelEdge === 'start';\n  const isTop = labelEdge === 'top' || labelEdge === 'inside'; // 'inside' needs to pick up all 'top' styles.\n  const isInside = labelEdge === 'inside';\n  const width = sizeToCSS(labelStartWidth);\n  const valueWidth = `calc(100% - ${width})`;\n\n  const labelStyles: JSX.CSSProperties = isStart\n    ? { flexBasis: width, width: width, maxWidth: width }\n    : {};\n\n  const valueStyles: JSX.CSSProperties = isStart\n    ? { flexBasis: valueWidth, width: valueWidth, maxWidth: valueWidth }\n    : {};\n\n  const { isFormLayout, isReadonly: isFormReadonly, labelWrapping } = useFormContext();\n  const { isReadonly } = useFormFieldContext();\n  const isPureReadonly = (isFormLayout && isFormReadonly) || (!isFormLayout && isReadonly);\n\n  const labelStyleClasses = classNames([\n    formLayoutTheme,\n    labelSlotStyles.base,\n    isStart && labelSlotStyles.start,\n    isTop && labelSlotStyles.top,\n    isTop && hasTopUserAssistance && labelSlotStyles.topAndTopUA,\n    isTop && isPureReadonly && labelSlotStyles.topPureReadonly\n  ]);\n\n  const labelInnerClasses = classNames([\n    isRadio && radioTheme,\n    isCheckbox && checkboxTheme,\n    labelTheme,\n    formLayoutTheme,\n    labelInnerStyles.base,\n    isStart && labelInnerStyles.start,\n    isRadio && isInside && checkboxRadioLabelInnerStyles.insideRadioSet,\n    isCheckbox && isInside && checkboxRadioLabelInnerStyles.insideCheckboxSet,\n    isRadio &&\n      isStart &&\n      !hasTopUserAssistance &&\n      checkboxRadioLabelInnerStyles.startRadioSetWithoutTopUA,\n    isCheckbox &&\n      isStart &&\n      !hasTopUserAssistance &&\n      checkboxRadioLabelInnerStyles.startCheckboxSetWithoutTopUA,\n    labelWrapping === 'truncate' && labelInnerStyles.noWrap\n  ]);\n\n  return (\n    <StyledLabelValueLayout\n      // For readonly start aligned labels, we want the div that is the parent of the label to\n      // stretch to the height of the value content, including the end content (InputSensitiveText)\n      flexAlign={isReadonly && isStart ? 'stretch' : 'start'}\n      labelStyleClasses={labelStyleClasses}\n      labelStyles={labelStyles}\n      labelInnerClasses={labelInnerClasses}\n      label={label}\n      valueStyles={valueStyles}>\n      {children}\n    </StyledLabelValueLayout>\n  );\n};\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { ComponentChildren, ComponentProps, Ref } from 'preact';\nimport { forwardRef, useImperativeHandle, useRef } from 'preact/compat';\n\nimport { FocusableHandle } from '#hooks/UNSAFE_useFocusableTextField';\nimport { useCollectionFocusRing } from '#hooks/PRIVATE_useCollectionFocusRing';\nimport { useTranslationBundle } from '#hooks/UNSAFE_useTranslationBundle';\nimport { FlexboxProps } from '#utils/UNSAFE_interpolations/flexbox';\nimport { Size } from '#utils/UNSAFE_size';\nimport { BundleType } from '#resources/nls/bundle';\nimport { Flex } from '#UNSAFE_Flex';\nimport { Label } from '#UNSAFE_Label';\nimport {\n  InlineHelp,\n  InlineUserAssistance,\n  InlineUserAssistanceContainer,\n  UserAssistanceDensityType\n} from '#UNSAFE_UserAssistance';\nimport { useCheckboxRadioField } from './useCheckboxRadioField';\nimport { HiddenAccessible } from '#UNSAFE_HiddenAccessible';\nimport { xUnits } from '#UNSAFE_Theme';\nimport { topUAContainerStyles } from './CheckboxRadioFieldStyles.css';\nimport { CheckboxRadioContext } from './CheckboxRadioContext';\nimport { layoutSpanStyles, LayoutColumnSpan } from '#utils/UNSAFE_styles/Layout';\nimport { type TestIdProps, useTestId } from '#hooks/UNSAFE_useTestId';\nimport { CheckboxRadioLabelValueLayout } from './CheckboxRadioLabelValueLayout';\nimport { AriaAttributesSignalExcluded } from '#utils/UNSAFE_attributeUtils';\n\ntype InlineUserAssistanceProps = ComponentProps<typeof InlineUserAssistance>;\n\ntype AriaProps = Pick<AriaAttributesSignalExcluded, 'aria-describedby'>;\n\ntype Props = TestIdProps &\n  AriaProps & {\n    /**\n     * Text to provide guidance to help the user understand what data to enter.\n     */\n    assistiveText?: InlineUserAssistanceProps['assistiveText'];\n    /**\n     * baseId, used to generate other element IDs.\n     */\n    baseId: string;\n    /**\n     * <RadioItem /> or <CheckboxItem />\n     */\n    children: ComponentChildren;\n    /**\n     * Specifies how many columns to span in a FormLayout with direction === 'row'\n     */\n    columnSpan?: LayoutColumnSpan;\n    /**\n     * layout direction of the children elements\n     */\n    direction?: FlexboxProps['direction'];\n    /**\n     * Value of the radio option.\n     */\n    hasValue?: boolean;\n    /**\n     * Help source URL associated with the component.\n     */\n    helpSourceLink?: InlineUserAssistanceProps['helpSourceLink'];\n    /**\n     * Custom text to be rendered for the <code>helpSourceLink</code>.\n     */\n    helpSourceText?: InlineUserAssistanceProps['helpSourceText'];\n    /**\n     * Specifies if the radio group is disabled.\n     */\n    isDisabled?: boolean;\n    /**\n     * Specifies if the radio group is read-only.\n     */\n    isReadonly?: boolean;\n    /**\n     * Specifies whether the radio group requires a selection to be made.\n     */\n    isRequired?: boolean;\n    /**\n     * Label text for the group of radio buttons.\n     */\n    label: string;\n    /**\n     * Specifies where the label is positioned relative to the field.\n     */\n    labelEdge?: 'none' | 'top' | 'start' | 'inside';\n    /**\n     * Specifies the width of the label when <code>labelEdge</code> is <code>\"start\"</code>.\n     */\n    labelStartWidth?: Size;\n    /**\n     * Messages to show on screen that are associated with the component.\n     */\n    messages?: InlineUserAssistanceProps['messages'];\n\n    role?: 'radiogroup' | 'group';\n    /**\n     * Specifies the density of the user assistance presentation.  It can be set to:\n     * <ul>\n     * <li><code>'reflow'</code>: Show inline. Layout will reflow when text is displayed.</li>\n     * <li><code>'efficient'</code>: Show inline and reserve space to prevent layout reflow when user\n     * assistance text is displayed.</li>\n     * <li><code>'compact'</code>: Show inline and reserve space to prevent layout reflow when user\n     * assistance text is displayed.</li>\n     * </ul>\n     */\n    userAssistanceDensity?: UserAssistanceDensityType;\n\n    parentComponentVariant: 'radioSet' | 'checkboxSet';\n  };\n\nexport const CheckboxRadioField = forwardRef(\n  (\n    {\n      'aria-describedby': ariaDescribedBy,\n      assistiveText,\n      baseId,\n      direction = 'column',\n      columnSpan = 1,\n      hasValue,\n      helpSourceLink,\n      helpSourceText,\n      isDisabled,\n      isReadonly,\n      isRequired,\n      label,\n      labelEdge,\n      labelStartWidth = '33%',\n      parentComponentVariant,\n      messages,\n      userAssistanceDensity,\n      role,\n      children,\n      testId\n    }: Props,\n    ref: Ref<FocusableHandle> = null\n  ) => {\n    const testIdProps = useTestId(testId);\n    const UAtestId = `${testId}-inline-user-assistance`;\n    const UAtestIdTop = testId ? `${UAtestId}-top` : undefined;\n    const UAtestIdBottom = testId ? `${UAtestId}-bottom` : undefined;\n    const hasTopUserAssistance =\n      !isDisabled && !isReadonly && (!!assistiveText || !!helpSourceLink);\n    // we still render <InlineUserAssistance/> if density is 'efficient' or 'compact' to save space,\n    // even though we don't render user assistance for disabled or readonly fields\n    const hasBottomUserAssistance = !isDisabled && !isReadonly;\n    const groupRef = useRef<HTMLDivElement>(null);\n\n    const {\n      groupProps,\n      labelProps,\n      topUserAssistanceProps,\n      bottomUserAssistanceProps,\n      readonlyId\n    } = useCheckboxRadioField({\n      ariaDescribedBy,\n      baseId,\n      isRequired,\n      isReadonly,\n      isDisabled,\n      label,\n      labelEdge,\n      messages,\n      hasValue,\n      hasTopUserAssistance,\n      hasBottomUserAssistance,\n      parentComponentVariant\n    });\n\n    const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n    const readonlyLabel = translations.formControl_readOnly();\n    const isRadioSet = parentComponentVariant === 'radioSet';\n\n    useImperativeHandle(ref, () => ({\n      focus: () => {\n        if (!isDisabled) {\n          const inputChildren = groupRef.current?.querySelectorAll<HTMLInputElement>('input') ?? [];\n          const selectedChild = Array.from(inputChildren).find((child) => child.checked);\n\n          if (selectedChild) {\n            selectedChild.focus();\n          } else {\n            inputChildren[0].focus();\n          }\n        }\n      },\n      blur: () => {\n        if (groupRef.current?.contains(document.activeElement)) {\n          (document.activeElement as HTMLElement).blur();\n        }\n      }\n    }));\n\n    // the props from the hook are used for focus management on the radioset variant to allow for arrow navigation\n    // while checkboxset uses tabbing\n    const [isFocusRingShown, focusRingProps] = useCollectionFocusRing(\n      groupRef,\n      isRadioSet ? ['ArrowUp', 'ArrowRight', 'ArrowDown', 'ArrowLeft'] : ['Tab']\n    );\n\n    const content = (\n      <>\n        {hasTopUserAssistance && (\n          <div\n            id={`${baseId}-top-ua-container`}\n            class={labelEdge === 'start' ? topUAContainerStyles.start : topUAContainerStyles.top}>\n            <InlineUserAssistanceContainer {...topUserAssistanceProps} testId={UAtestIdTop}>\n              <InlineHelp\n                assistiveText={assistiveText}\n                sourceLink={helpSourceLink}\n                sourceText={helpSourceText}\n              />\n            </InlineUserAssistanceContainer>\n          </div>\n        )}\n        <Flex\n          direction={direction}\n          {...(direction === 'row' && { gap: [0, xUnits(8) as Size], wrap: 'wrap' })}>\n          <CheckboxRadioContext.Provider value={{ isFocusRingShown }}>\n            {children}\n          </CheckboxRadioContext.Provider>\n        </Flex>\n        {hasBottomUserAssistance ? (\n          <InlineUserAssistance\n            {...bottomUserAssistanceProps}\n            requiredAlignment=\"start\"\n            messages={messages}\n            userAssistanceDensity={userAssistanceDensity === 'reflow' ? 'reflow' : 'efficient'}\n            testId={UAtestIdBottom}\n          />\n        ) : userAssistanceDensity === 'reflow' ? undefined : (\n          /* save space for user assistance if density is 'efficient' or 'compact', even though we don't\n             render user assistance for disabled or readonly fields */\n          <InlineUserAssistance\n            id={bottomUserAssistanceProps?.id}\n            userAssistanceDensity=\"efficient\"\n            testId={UAtestIdBottom}\n          />\n        )}\n      </>\n    );\n    // The top level element needs the column span class on it.\n    const classes = layoutSpanStyles.layoutSpanColumn[columnSpan];\n\n    return (\n      <div\n        role={role}\n        ref={groupRef}\n        class={classes}\n        {...groupProps}\n        {...focusRingProps}\n        {...testIdProps}>\n        {labelEdge === 'none' ? (\n          content\n        ) : (\n          <CheckboxRadioLabelValueLayout\n            parentComponentVariant={parentComponentVariant}\n            hasTopUserAssistance={hasTopUserAssistance}\n            label={\n              <Label\n                {...labelProps}\n                variant={labelEdge}\n                userAssistanceDensity=\"efficient\"\n                parentComponentVariant={parentComponentVariant}>\n                {label}\n              </Label>\n            }\n            labelEdge={labelEdge}\n            labelStartWidth={labelStartWidth}>\n            {content}\n          </CheckboxRadioLabelValueLayout>\n        )}\n        {isReadonly && (\n          <HiddenAccessible id={readonlyId} isHidden={true}>\n            {readonlyLabel}\n          </HiddenAccessible>\n        )}\n      </div>\n    );\n  }\n);\n"],"names":["CheckboxRadioLabelValueLayout","label","labelEdge","children","parentComponentVariant","labelStartWidth","hasTopUserAssistance","baseTheme","radioTheme","useComponentTheme","RadioRedwoodTheme","checkboxTheme","CheckboxRedwoodTheme","labelTheme","LabelRedwoodTheme","formLayoutTheme","FormLayoutRedwoodTheme","isRadio","isCheckbox","isStart","isTop","isInside","width","sizeToCSS","valueWidth","labelStyles","flexBasis","maxWidth","valueStyles","isFormLayout","isReadonly","isFormReadonly","labelWrapping","useFormContext","useFormFieldContext","isPureReadonly","labelStyleClasses","classNames","labelSlotStyles","base","start","top","topAndTopUA","topPureReadonly","labelInnerClasses","labelInnerStyles","checkboxRadioLabelInnerStyles","noWrap","_jsx","StyledLabelValueLayout","flexAlign","CheckboxRadioField","forwardRef","ariaDescribedBy","assistiveText","baseId","direction","columnSpan","hasValue","helpSourceLink","helpSourceText","isDisabled","isRequired","messages","userAssistanceDensity","role","testId","ref","testIdProps","useTestId","UAtestId","UAtestIdTop","undefined","UAtestIdBottom","hasBottomUserAssistance","groupRef","useRef","groupProps","labelProps","topUserAssistanceProps","bottomUserAssistanceProps","readonlyId","useCheckboxRadioField","readonlyLabel","useTranslationBundle","formControl_readOnly","isRadioSet","useImperativeHandle","focus","inputChildren","current","querySelectorAll","selectedChild","Array","from","find","child","checked","blur","contains","document","activeElement","isFocusRingShown","focusRingProps","useCollectionFocusRing","content","_jsxs","_Fragment","id","class","topUAContainerStyles","InlineUserAssistanceContainer","InlineHelp","sourceLink","sourceText","Flex","gap","xUnits","wrap","jsx","CheckboxRadioContext","Provider","value","InlineUserAssistance","requiredAlignment","classes","layoutSpanStyles","layoutSpanColumn","Label","variant","HiddenAccessible","isHidden"],"mappings":"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"}