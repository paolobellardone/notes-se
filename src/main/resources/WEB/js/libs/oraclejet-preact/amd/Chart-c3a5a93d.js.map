{"version":3,"file":"Chart-c3a5a93d.js","sources":["../../src/PRIVATE_Axis/utils/axisNavUtils.ts","../../src/PRIVATE_VisOverview/OverviewBackground.tsx","../../src/PRIVATE_Chart/ChartWithDimensions.tsx","../../src/PRIVATE_VisSVGText/useTextTruncation.ts","../../src/PRIVATE_VisOverview/utils.ts","../../src/PRIVATE_Chart/overviewUtils.tsx","../../src/PRIVATE_Chart/Chart.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { Group, ChartGroupInfo } from '#utils/UNSAFE_visTypes/chart';\ntype isGroupNavigableType = (groupIndex: number) => boolean;\n\nexport function getNextGroup(\n  info: ChartGroupInfo,\n  viewportEndIndex: number,\n  isGroupNavigable: isGroupNavigableType\n): ChartGroupInfo | undefined {\n  const groupIndex = info.groupIndex + 1;\n  if (groupIndex >= viewportEndIndex) {\n    return;\n  }\n\n  if (isGroupNavigable(groupIndex)) {\n    return { groupIndex };\n  }\n  return getNextGroup({ groupIndex }, viewportEndIndex, isGroupNavigable);\n}\n\nexport function getPreviousGroup(\n  info: ChartGroupInfo,\n  isGroupNavigable: isGroupNavigableType\n): ChartGroupInfo | undefined {\n  const groupIndex = info.groupIndex - 1;\n  if (groupIndex < 0) {\n    return;\n  }\n  if (isGroupNavigable(groupIndex)) {\n    return { groupIndex };\n  }\n  return getPreviousGroup({ groupIndex }, isGroupNavigable);\n}\n\nexport function getGroupNavUtil(\n  groups: Group[],\n  renderedGroups: number[],\n  xIndexExtent: { startIndex: number; endIndex: number },\n  drilling: 'on' | 'off' | 'groupsOnly',\n  isRtl: boolean\n) {\n  const isGroupNavigable = (groupIndex: number) => {\n    const groupsDrilling = groups[renderedGroups[groupIndex]].drilling;\n    return (drilling === 'on' || drilling === 'groupsOnly') && groupsDrilling != 'off';\n  };\n\n  const getDefaultNavGroup = (info: ChartGroupInfo) => {\n    if (xIndexExtent.startIndex > renderedGroups[info.groupIndex]) {\n      info.groupIndex = 0;\n      return info;\n    } else if (xIndexExtent.endIndex < renderedGroups[info.groupIndex]) {\n      info.groupIndex = renderedGroups.length - 1;\n      return info;\n    }\n    return;\n  };\n\n  const getNextNavGroup = (info: ChartGroupInfo, arrow: 'ArrowRight' | 'ArrowLeft') => {\n    let nextGroup = getDefaultNavGroup(info);\n\n    if (nextGroup) return nextGroup;\n\n    if (arrow === 'ArrowRight') {\n      nextGroup = isRtl\n        ? getPreviousGroup(info, isGroupNavigable)\n        : getNextGroup(info, renderedGroups.length, isGroupNavigable);\n    } else {\n      nextGroup = isRtl\n        ? getNextGroup(info, renderedGroups.length, isGroupNavigable)\n        : getPreviousGroup(info, isGroupNavigable);\n    }\n    return nextGroup || info;\n  };\n\n  return { getDefaultNavGroup, getNextNavGroup };\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { OverviewProps } from './overview.types';\nimport { styles } from './themes/VisOverview.css';\n\nexport function OverviewBackground({\n  x,\n  width,\n  height,\n  y,\n  windowX,\n  windowHeight,\n  windowWidth,\n  windowY\n}: OverviewProps) {\n  return (\n    <>\n      <rect\n        x={x}\n        y={y}\n        width={Math.max(0, windowX - x)}\n        height={height}\n        class={styles.overviewBackground}></rect>\n\n      <rect\n        x={windowX + windowWidth}\n        width={Math.max(0, x + width - windowX - windowWidth)}\n        y={y}\n        height={height}\n        class={styles.overviewBackground}></rect>\n\n      <rect\n        x={windowX}\n        y={y}\n        height={Math.max(0, windowY - y)}\n        width={windowWidth}\n        class={styles.overviewBackground}></rect>\n\n      <rect\n        x={windowX}\n        y={windowY + windowHeight}\n        width={windowWidth}\n        class={styles.overviewBackground}\n        height={Math.max(y + height - windowY - windowHeight, 0)}></rect>\n    </>\n  );\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { useTextDimensions } from '#hooks/PRIVATE_useTextDimensions';\nimport { useCssVars } from '#hooks/PRIVATE_useCssVars/useCssVars';\nimport { styles } from './themes/ChartStyles.css';\nimport { useMemo, useRef, useState } from 'preact/hooks';\nimport { PlotArea } from '#PRIVATE_PlotArea';\nimport { useId } from '#hooks/UNSAFE_useId';\nimport { Axis } from '#PRIVATE_Axis/Axis';\nimport { useChartViewport } from '#hooks/PRIVATE_useChartViewport';\nimport {\n  getAvailSpace,\n  getLayoutInfo,\n  getOuterGaps,\n  getScrollBarSpace,\n  updateScrollBarSpace\n} from '#utils/PRIVATE_chartUtils/layoutUtils';\nimport { useChartNav } from '#hooks/PRIVATE_useChartNav/useChartNav';\nimport { mergeProps } from '#utils/UNSAFE_mergeProps';\nimport { getAxesPosition } from '#PRIVATE_Axis/utils/axisUtils';\nimport { ScrollBar } from '#PRIVATE_ChartScrollBar';\nimport { useSelectDrill } from '#hooks/PRIVATE_useChartEvents/useSelectDrill';\nimport { useChartDatatipAndCursor } from '#hooks/PRIVATE_useChartEvents/useDatatipAndCursor';\nimport { getGroupNavUtil } from '#PRIVATE_Axis/utils/axisNavUtils';\nimport { TimeAxisProps } from '#utils/UNSAFE_visTypes/chart';\nimport { Gridlines } from '#PRIVATE_PlotArea/Gridlines';\nimport { useUser } from '#hooks/UNSAFE_useUser';\nimport { useTestId } from '#hooks/UNSAFE_useTestId';\nimport { getChartVars } from '#utils/PRIVATE_chartUtils';\nimport { useChartContextMenu } from '#hooks/PRIVATE_useChartContextMenu';\nimport { useChartDnd } from '#hooks/PRIVATE_useChartDnd';\nimport { getElementData } from '#utils/UNSAFE_visUtils';\nimport { useTextTruncation } from '#PRIVATE_VisSVGText/useTextTruncation';\nimport { useChartMarquee } from '#hooks/PRIVATE_useChartMarquee';\nimport { ChartProps } from './Chart';\nimport type { gestureTypes } from '#hooks/PRIVATE_useVisContextMenu';\nimport { useVisTouchResponse } from '#hooks/PRIVATE_useVisTouchResponse';\nimport { merge } from '#utils/UNSAFE_stringUtils';\nimport { LineAreaItem } from '#UNSAFE_LineAreaChart/lineAreaChart.types';\nimport { ScatterItem } from '#UNSAFE_ScatterChart/scatterChart.types';\nimport { BarItemData } from '#UNSAFE_BarChart/barChart.types';\nimport { OverviewContext } from '#hooks/PRIVATE_useOverviewContext';\nimport { getWindowCoords } from '#PRIVATE_VisOverview/utils';\nimport { Dimension } from '#utils/UNSAFE_visTypes/common';\nimport { getRenderer } from './overviewUtils';\nimport { ComponentChildren } from 'preact';\n\ntype ChartWithDimensionsProps<K, D> = Omit<ChartProps<K, D>, 'width' | 'height'> & {\n  width: number;\n  height: number;\n  overviewRenderer: (props: Dimension) => {\n    background: ComponentChildren;\n    slidingWindow: ComponentChildren;\n  };\n  yAxisSize: number;\n  isOverview: boolean;\n};\n\nconst OVERVIEW_GAP = 10;\n\nconst chartVars = getChartVars();\n\nexport function ChartWithDimensions<\n  K extends string | number,\n  D extends LineAreaItem<K> | ScatterItem<K> | BarItemData<K>\n>({\n  width,\n  height,\n  selectedIds,\n  hiddenIds,\n  hideAndShowBehavior = 'none',\n  orientation = 'vertical',\n  xAxis,\n  yAxis,\n  plotArea,\n  dragMode = 'user',\n  series,\n  groups,\n  isStacked = false,\n  getDataItem,\n  selectionMode = 'none',\n  drilling = 'off',\n  dataCursorPosition,\n  onSelectionChange,\n  isDataCursorEnabled,\n  dataCursorStyle,\n  onViewportChange,\n  onDataCursorPositionChange,\n  onItemDrill,\n  onGroupDrill,\n  onItemHover,\n  onItemFocus,\n  datatip,\n  zoomAndScroll = 'off',\n  offset,\n  getNavUtil,\n  getDataItemPos,\n  getGapRatio,\n  valueFormats,\n  findNearest,\n  getMarkerInfo,\n  isRtl,\n  children,\n  testId,\n  renderGridLinesInFront,\n  isDataXAxis,\n  contextMenuConfig,\n  overview = 'off',\n  defaultOverviewContentRenderer,\n  isOverview,\n  yAxisSize,\n  overviewRenderer,\n  ...props\n}: ChartWithDimensionsProps<K, D>) {\n  const testIdProps = useTestId(testId);\n  const rootRef = useRef<HTMLDivElement>(null);\n  const isTestEnv = testIdProps['data-testid'] !== undefined;\n  const isHoriz = orientation === 'horizontal';\n  const { xAxisPosition, yAxisPosition } = getAxesPosition(yAxis, isHoriz, isRtl);\n  const { resolvedVars, cssContent } = useCssVars(chartVars);\n  const colors = Array.from(Array(12)).map((_, index) => {\n    return resolvedVars[`color${index + 1}`];\n  });\n  const { textMeasureContent, getTextDimensions } = useTextDimensions();\n  let availSpace = getAvailSpace(width, height);\n\n  if (isOverview && yAxisSize) {\n    const w = availSpace.width - yAxisSize;\n    const gaps = getOuterGaps(w, height);\n    availSpace.width -= yAxisSize - 2 * gaps.width;\n    availSpace.x += yAxisSize - gaps.width;\n  }\n  const isTimeAxis = (xAxis as TimeAxisProps)?.timeAxisType != null;\n\n  const updatedSpace = getScrollBarSpace(\n    isTimeAxis,\n    availSpace,\n    zoomAndScroll,\n    xAxisPosition,\n    overview\n  );\n  let scrollDims = updatedSpace.scrollDims;\n  availSpace = updatedSpace.availSpace;\n  const { locale } = useUser();\n  const { x, y, width: _width, height: _height } = availSpace;\n  const labelFontSize = resolvedVars['labelFontSize'];\n  const layoutInfo = useMemo(() => {\n    const hiddenSet = new Set(hiddenIds);\n    return getLayoutInfo<K, D>(\n      series,\n      groups,\n      getDataItem,\n      xAxis,\n      yAxis,\n      { x, y, width: _width, height: _height }, // availSpace\n      hiddenSet,\n      hideAndShowBehavior,\n      isHoriz,\n      isRtl,\n      isStacked,\n      labelFontSize,\n      offset,\n      locale,\n      getTextDimensions,\n      isTestEnv,\n      isDataXAxis\n    );\n  }, [\n    x,\n    y,\n    _width,\n    _height,\n    getDataItem,\n    getTextDimensions,\n    groups,\n    hiddenIds,\n    hideAndShowBehavior,\n    isDataXAxis,\n    isHoriz,\n    isRtl,\n    isStacked,\n    isTestEnv,\n    locale,\n    offset,\n    labelFontSize,\n    series,\n    xAxis,\n    yAxis\n  ]);\n\n  const {\n    xProps,\n    xScale,\n    xViewportExtent,\n    xAxisExtent,\n    xIndexExtent,\n    xAxisMinExtent,\n    yViewportExtent,\n    yAxisExtent,\n    groupWidth,\n    yProps,\n    yScale,\n    yMaxDim,\n    yMajorTicks,\n    xMajorTicks,\n    yMinorTicks,\n    xMinorTicks,\n    plotAreaSpace,\n    xSpace,\n    ySpace,\n    idToDataMap,\n    formatAxisLabel,\n    formatYValue\n  } = layoutInfo;\n\n  scrollDims = updateScrollBarSpace(scrollDims, xAxisPosition === 'bottom', isRtl, yMaxDim);\n\n  const gapRatio = getGapRatio(xIndexExtent.startIndex!, xIndexExtent.endIndex!);\n\n  const getNextChartItem = getNavUtil(xIndexExtent.startIndex!, xIndexExtent.endIndex!);\n\n  const renderedGroupsIndex = xProps.tickLabels.map(({ index }) => index + xIndexExtent.startIndex);\n  const { getNextNavGroup, getDefaultNavGroup } = getGroupNavUtil(\n    groups,\n    renderedGroupsIndex,\n    xIndexExtent as { startIndex: number; endIndex: number }, // TODO : JET-71301 | Scatter should have different nav utils call.\n    drilling,\n    isRtl\n  );\n\n  const {\n    ignoreSelectPointerUp,\n    cursor,\n    yAxisCursor,\n    marqueeProps,\n    marqueeContent,\n    toggleButtonContent,\n    isPointInsideMarquee,\n    dragMode: mode\n  } = useChartMarquee<K, D>({\n    plotAreaSpace,\n    xSpace,\n    ySpace,\n    dragMode,\n    chartWidth: width,\n    isMultiSelection: selectionMode === 'multiple',\n    onViewportChange,\n    isZoomScroll: zoomAndScroll === 'live',\n    xAxisExtent,\n    xScale,\n    selectedIds,\n    getDataById: (id) => idToDataMap.get(id),\n    onSelectionChange,\n    viewportMax: xViewportExtent.viewportMax!,\n    viewportMin: xViewportExtent.viewportMin!,\n    isRtl,\n    xAxisMinExtent\n  });\n\n  const { touchResponse, touchResponseStyle } = useVisTouchResponse({\n    type: 'auto',\n    supportsTouchDragGestures: mode !== 'off',\n    rootRef\n  });\n\n  const { activeId, focusedItemInfo, hoveredItemInfo, focusedGroupInfo, navProps, onFocusUpdate } =\n    useChartNav({\n      rootRef,\n      getNextChartItem,\n      getNextNavGroup,\n      getDefaultNavGroup,\n      touchResponse,\n      onItemHover,\n      onItemFocus,\n      drilling,\n      xIndexExtent\n    });\n\n  const onContextMenuDismissed = (gesture: gestureTypes) => {\n    if (gesture === 'keyboard') {\n      onFocusUpdate();\n    }\n  };\n\n  const getTextAndBounds = (target: EventTarget | null) => {\n    if (target != rootRef.current) {\n      const dataSet = getElementData(rootRef, target as HTMLElement);\n      const text = dataSet?.['ojText']!;\n\n      if (!text) {\n        return;\n      }\n\n      if (text === xAxis?.title) {\n        return {\n          text,\n          bounds: xProps.titleProps?.dims\n        };\n      } else if (text === yAxis?.title) {\n        return {\n          text,\n          bounds: yProps.titleProps?.dims\n        };\n      } else if (dataSet?.['ojGroupIndex']) {\n        const index = parseInt(dataSet['ojGroupIndex']);\n        return {\n          bounds: xProps.tickLabels[index].dims,\n          text: text!\n        };\n      }\n    }\n\n    if (target === rootRef.current && focusedGroupInfo.isFocusVisible) {\n      const group = groups[focusedGroupInfo.groupIndex];\n      return {\n        bounds: xProps.tickLabels[focusedGroupInfo.groupIndex].dims,\n        text: group.name || group.id\n      };\n    }\n    return;\n  };\n\n  const { tooltipContent, tooltipProps } = useTextTruncation({\n    getTextAndBounds,\n    width,\n    isRtl\n  });\n\n  const viewportProps = useChartViewport({\n    rootRef,\n    width,\n    height,\n    xViewportExtent,\n    yViewportExtent,\n    xAxisExtent,\n    yAxisExtent,\n    xScale,\n    yScale,\n    plotAreaSpace,\n    isRtl,\n    isHoriz,\n    zoomAndScroll,\n    onViewportChange\n  });\n\n  const ignoreAsTrigger = (target: EventTarget | null) => {\n    if (!target) {\n      return false;\n    }\n\n    const dataset = getElementData(rootRef, target as HTMLElement);\n    if (\n      (dataset &&\n        (dataset['ojPrivateObject'] === 'marquee' ||\n          dataset['ojPrivateObject'] === 'dragModeControls' ||\n          dataset['ojPrivateObject'] === 'scrollBar')) ||\n      ignoreSelectPointerUp\n    ) {\n      return true;\n    }\n\n    return false;\n  };\n\n  const { selectDrillProps, selectionContent } = useSelectDrill<K, D>({\n    selectionMode,\n    selection: [...selectedIds],\n    onChange: onSelectionChange,\n    rootRef,\n    drilling,\n    onItemDrill,\n    onGroupDrill,\n    focusedGroupInfo,\n    focusedItemInfo,\n    groups,\n    getDataItem,\n    getDataById: (id) => idToDataMap.get(id),\n    ignoreAsTrigger\n  });\n\n  const findNearestData = findNearest(xScale as any, yScale, groupWidth, gapRatio);\n  const getDataItemPosition = getDataItemPos(xScale as any, yScale, groupWidth, gapRatio);\n  const [datatipDisabled, setDatatipDisabled] = useState(false);\n  const {\n    datatipContent,\n    dataCursorContent,\n    datatipProps: { 'aria-describedby': datatipAriaDescribedby, ...datatipProps }\n  } = useChartDatatipAndCursor<K, D>({\n    series,\n    groups,\n    width,\n    height,\n    findNearest: findNearestData,\n    plotAreaSpace,\n    onDataCursorPositionChange,\n    isDataCursorEnabled,\n    dataCursorPosition,\n    dataCursorStyle,\n    hoveredItemInfo,\n    focusedItemInfo,\n    getDataItem,\n    getMarkerInfo,\n    getDataItemPos: getDataItemPosition,\n    datatip,\n    valueFormats,\n    isHoriz,\n    touchResponse,\n    isDisabled: datatipDisabled,\n    xScale: xScale as any,\n    yScale,\n    timeAxisType: (xAxis as TimeAxisProps)?.timeAxisType,\n    formatAxisLabel,\n    formatYValue,\n    hasXYValues: isDataXAxis\n  });\n\n  const isGroupInteractive = (index: number) => {\n    if ((xAxis as TimeAxisProps)?.timeAxisType != null) {\n      return false;\n    }\n    const groupDrill = groups[index]?.drilling;\n    if (groupDrill === 'on') {\n      return true;\n    }\n\n    if (groupDrill != 'off' && (drilling === 'on' || drilling === 'groupsOnly')) {\n      return true;\n    }\n    return false;\n  };\n\n  const plotAreaClipPathId = useId();\n  const { startIndex: xStartIndex, endIndex: xEndIndex } = xIndexExtent;\n  const gridLines = (\n    <Gridlines\n      plotArea={plotArea}\n      yMinorTicks={yMinorTicks}\n      xMinorTicks={xMinorTicks}\n      xScale={xScale}\n      yScale={yScale}\n      isLog={yAxis?.scale === 'log'}\n      yTicks={yMajorTicks}\n      xTicks={xMajorTicks}\n      yAxisPosition={yAxisPosition}\n      isDataXAxis={isDataXAxis}\n    />\n  );\n  const hasData = series.length > 0 && groups.length > 0;\n\n  const { contextMenuContent, contextMenuProps } = useChartContextMenu<K, D>({\n    isRtl,\n    width,\n    height,\n    getDataItemPosition,\n    series,\n    groups,\n    getDataItem,\n    focusedItemInfo,\n    rootRef,\n    xAxisTitle: xAxis?.title,\n    yAxisTitle: yAxis?.title,\n    contextMenuConfig: hasData ? contextMenuConfig : undefined,\n    onContextMenuDismissed\n  });\n\n  const [dragOver, setDragOver] = useState<{ accepted: boolean | undefined; type: string }>({\n    accepted: undefined,\n    type: ''\n  });\n\n  const { draggable, dndProps, dndContent } = useChartDnd<K, D>({\n    onDrag: props.onDrag,\n    onDragStart: props.onDragStart,\n    onDragEnd: props.onDragEnd,\n    onDragEnter: props.onDragEnter,\n    onDragLeave: props.onDragLeave,\n    onDragOver: props.onDragOver,\n    onDrop: props.onDrop,\n    itemsDraggable: props.itemsDraggable,\n    groupDraggable: props.groupDraggable,\n    rootRef,\n    groups,\n    series,\n    selectedIds,\n    getDataItem,\n    xSpace,\n    ySpace,\n    plotAreaSpace,\n    setDragOver,\n    setDatatipDisabled,\n    onSelectionChange\n  });\n\n  const eventsProps = mergeProps(\n    navProps,\n    selectDrillProps,\n    viewportProps,\n    datatipProps,\n    marqueeProps,\n    tooltipProps,\n    contextMenuProps,\n    dndProps\n  );\n\n  const overviewContentRenderer =\n    overview != 'off' && (overview === 'on' || !overview.renderer)\n      ? defaultOverviewContentRenderer\n      : undefined;\n\n  const { background, slidingWindow } = overviewRenderer(plotAreaSpace);\n  return (\n    <>\n      {getTextDimensions && resolvedVars['labelFontSize'] != undefined && (\n        <div\n          tabIndex={isOverview ? undefined : 0}\n          draggable={draggable}\n          ref={rootRef}\n          aria-activedescendant={activeId}\n          aria-label={props['aria-label']}\n          aria-labelledby={props['aria-labelledby']}\n          aria-describedby={merge([props['aria-describedby'], datatipAriaDescribedby])}\n          style={{ ...touchResponseStyle }}\n          role={isOverview ? undefined : 'application'}\n          className={styles.baseChartStyle}\n          data-oj-private-selection-mode={isTestEnv ? selectionMode : undefined}\n          {...testIdProps}\n          {...(isOverview ? {} : eventsProps)}>\n          <svg\n            width=\"100%\"\n            height={\n              scrollDims.height != 0 && overview != 'off'\n                ? `${Math.ceil((updatedSpace.availSpace.height + OVERVIEW_GAP) * 100) / height}%`\n                : '100%'\n            }>\n            <clipPath id={`${plotAreaClipPathId}`}>\n              <rect {...plotAreaSpace}></rect>\n            </clipPath>\n            {background}\n            <PlotArea\n              color={plotArea?.color}\n              dragOverStyle={\n                dragOver.type !== 'plotArea' ? 'none' : dragOver.accepted ? 'accept' : 'reject'\n              }\n              yScale={yScale}\n              hasAxisLine={!isOverview}\n              cursor={cursor}\n              isLog={yAxis?.scale === 'log'}\n              availSpace={plotAreaSpace}\n              xAxisPosition={xAxisPosition}\n              isDataXAxis={isDataXAxis}\n              isRtl={isRtl}\n            />\n            {!renderGridLinesInFront && gridLines}\n            <Axis\n              {...(yProps as any)}\n              axisPosition={yAxisPosition}\n              isRtl={isRtl}\n              cursor={yAxisCursor}\n              availSpace={ySpace}\n              dragOverStyle={\n                dragOver.type !== 'yAxis' ? 'none' : dragOver.accepted ? 'accept' : 'reject'\n              }\n            />\n            <Axis\n              {...xProps}\n              isRtl={isRtl}\n              axisPosition={xAxisPosition}\n              isTextInteractive={isGroupInteractive}\n              activeId={activeId}\n              cursor={cursor}\n              focusedGroupIndex={\n                focusedGroupInfo.isFocusVisible ? focusedGroupInfo.groupIndex : undefined\n              }\n              availSpace={xSpace}\n              dragOverStyle={\n                dragOver.type !== 'xAxis' ? 'none' : dragOver.accepted ? 'accept' : 'reject'\n              }\n            />\n            <g clip-path={`url(#${plotAreaClipPathId})`}>\n              {children({\n                xStartIndex,\n                xEndIndex,\n                colors,\n                xScale: xScale as any,\n                yScale,\n                isPointInsideMarquee,\n                defaultFontSize: resolvedVars['labelFontSize'],\n                gapRatio,\n                activeId,\n                focusedItemInfo,\n                hoveredItemInfo,\n                getTextDimensions,\n                groupWidth\n              })}\n              {renderGridLinesInFront && gridLines}\n              {dataCursorContent}\n            </g>\n            {slidingWindow}\n            {zoomAndScroll === 'live' && !isOverview && (\n              <ScrollBar\n                availSpace={scrollDims}\n                isRtl={isRtl}\n                viewport={xViewportExtent}\n                axisExtent={xAxisExtent}\n                isHoriz={xAxisPosition === 'bottom'}\n              />\n            )}\n            {marqueeContent}\n          </svg>\n          <OverviewContext.Provider\n            value={{\n              yAxisSize: ySpace.width,\n              isOverview: true,\n              width,\n              height: scrollDims.height,\n              overviewRenderer: (overviewChartPlotArea: Dimension) => {\n                const { xScale: overviewXScale, ...windowCoords } = getWindowCoords(\n                  isRtl,\n                  xViewportExtent,\n                  xAxisExtent,\n                  yViewportExtent,\n                  yAxisExtent,\n                  overviewChartPlotArea\n                );\n                return getRenderer(\n                  xAxisExtent,\n                  isRtl,\n                  overviewXScale,\n                  overviewChartPlotArea,\n                  windowCoords,\n                  true,\n                  onViewportChange\n                );\n              }\n            }}>\n            {!isOverview && overview !== 'off' && overviewContentRenderer && (\n              <div style={{ width, height: scrollDims.height }}>{overviewContentRenderer()}</div>\n            )}\n          </OverviewContext.Provider>\n          {toggleButtonContent}\n          {datatipContent}\n          {tooltipContent}\n          {contextMenuContent}\n          {selectionContent}\n          {dndContent}\n        </div>\n      )}\n      {textMeasureContent}\n      {cssContent}\n    </>\n  );\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { Dimension } from '#utils/UNSAFE_visTypes/common';\nimport { calculateOffset } from '#utils/PRIVATE_visLayoutUtils/layoutUtils';\nimport { useTooltip } from '#hooks/UNSAFE_useTooltip';\nimport { mergeProps } from '#utils/UNSAFE_mergeProps';\nimport { useRef, useState } from 'preact/hooks';\n\ntype Props = {\n  getTextAndBounds: (target: EventTarget | null) =>\n    | {\n        text?: string;\n        bounds?: Dimension;\n      }\n    | undefined;\n  isRtl: boolean;\n  width: number;\n};\n\nexport function useTextTruncation({ getTextAndBounds, width, isRtl }: Props) {\n  const [text, setText] = useState<string>();\n  const bounds = useRef<Dimension>();\n\n  const { tooltipContent, tooltipProps } = useTooltip({\n    text,\n    position: 'top-start',\n    offset: calculateOffset(isRtl, width, bounds.current)\n  });\n\n  const onPointerMove = (event: Event) => {\n    const textAndBounds = getTextAndBounds(event.target);\n\n    if (textAndBounds) {\n      bounds.current = textAndBounds.bounds;\n      setText(textAndBounds.text);\n    } else {\n      setText(undefined);\n    }\n  };\n\n  return {\n    tooltipContent,\n    tooltipProps: mergeProps({ onPointerMove }, tooltipProps)\n  };\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { ScaleLinear } from '#utils/PRIVATE_chartUtils';\nimport { Dimension } from '#utils/UNSAFE_visTypes/common';\n\nexport function getWindowCoords(\n  isRtl: boolean,\n  xViewportExtent: { viewportMin: number; viewportMax: number },\n  xAxisExtent: { min: number; max: number },\n  yViewportExtent: { viewportMin: number; viewportMax: number },\n  yAxisExtent: { min: number; max: number },\n  plotAreaSpace: Dimension\n) {\n  const xDomain = [xAxisExtent.min, xAxisExtent.max] as [number, number];\n  const xRange = (\n    isRtl\n      ? [plotAreaSpace.x + plotAreaSpace.width, plotAreaSpace.x]\n      : [plotAreaSpace.x, plotAreaSpace.x + plotAreaSpace.width]\n  ) as [number, number];\n  const xScale = new ScaleLinear(xDomain, xRange);\n\n  const yDomain = [yAxisExtent.min, yAxisExtent.max] as [number, number];\n  const yRange = [plotAreaSpace.y + plotAreaSpace.height, plotAreaSpace.y] as [number, number];\n\n  const yScale = new ScaleLinear(yDomain, yRange);\n\n  const windowX = xScale.transform(xViewportExtent.viewportMin);\n  const windowWidth = Math.abs(\n    xScale.transform(xViewportExtent.viewportMax) - xScale.transform(xViewportExtent.viewportMin)\n  );\n\n  return {\n    windowX: isRtl ? windowX - windowWidth : windowX + 0.5,\n    windowWidth: windowWidth - 0.5,\n    windowY: yScale.transform(yViewportExtent.viewportMax),\n    windowHeight: Math.abs(\n      yScale.transform(yViewportExtent.viewportMax) - yScale.transform(yViewportExtent.viewportMin)\n    ),\n    xScale,\n    yScale\n  };\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { OverviewSlidingWindow } from '#PRIVATE_VisOverview';\nimport { OverviewBackground } from '#PRIVATE_VisOverview/OverviewBackground';\nimport { updateViewportFromOverview } from '#utils/PRIVATE_chartUtils/overviewUtils';\nimport { Scale } from '#utils/UNSAFE_visTypes/chart';\nimport { Dimension } from '#utils/UNSAFE_visTypes/common';\n\nexport function getRenderer(\n  xAxisExtent: { min: number; max: number },\n  isRtl: boolean,\n  overviewXScale: Scale,\n  plotAreaSpace: Dimension,\n  windowCoords: { windowX: number; windowY: number; windowHeight: number; windowWidth: number },\n  hasHandles: boolean,\n  onViewportChange?: (detail: {\n    xMin?: number;\n    xMax?: number;\n    yMin?: number;\n    yMax?: number;\n  }) => void\n) {\n  return {\n    slidingWindow: (\n      <OverviewSlidingWindow\n        {...plotAreaSpace}\n        {...windowCoords}\n        hasHandles={hasHandles}\n        onWindowDimsChange={(props: { deltaX: number; deltaWidth: number }) => {\n          updateViewportFromOverview(\n            xAxisExtent,\n            isRtl,\n            windowCoords.windowX,\n            windowCoords.windowWidth,\n            props.deltaX,\n            props.deltaWidth,\n            overviewXScale,\n            onViewportChange\n          );\n        }}\n      />\n    ),\n    background: <OverviewBackground {...plotAreaSpace} {...windowCoords} />\n  };\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { dimensionStyle } from './themes/ChartStyles.css';\nimport { TrackResizeContainer } from '#UNSAFE_TrackResizeContainer';\nimport { ChartWithDimensions } from './ChartWithDimensions';\nimport {\n  ChartCommonProps,\n  ChartSeriesData,\n  GetNextChartItemType,\n  Info,\n  Scale,\n  getDataPosType\n} from '#utils/UNSAFE_visTypes/chart';\nimport { Dimension, MarkerShapes } from '#utils/UNSAFE_visTypes/common';\nimport { ComponentChildren, VNode } from 'preact';\nimport { Property } from 'csstype';\nimport { LineAreaItem } from '#UNSAFE_LineAreaChart/lineAreaChart.types';\nimport { ScatterItem } from '#UNSAFE_ScatterChart/scatterChart.types';\nimport { BarItemData } from '#UNSAFE_BarChart/barChart.types';\nimport { useOverviewContext } from '#hooks/PRIVATE_useOverviewContext';\n\nexport type ChartProps<K, D> = {\n  selectedIds: Set<K>;\n  getGapRatio: (startIndex: number, endIndex: number) => number;\n  getNavUtil: (startIndex: number, endIndex: number) => GetNextChartItemType;\n  getDataItemPos: (\n    xScale: Scale,\n    yScale: Scale,\n    groupWidth: number,\n    gapRatio: number\n  ) => getDataPosType;\n  findNearest: (\n    xScale: Scale,\n    yScale: Scale,\n    groupWidth: number,\n    gapRatio: number\n  ) => (\n    x: number,\n    y: number\n  ) =>\n    | {\n        seriesIndex: number;\n        groupIndex: number;\n        y: number | undefined;\n        x: number;\n      }\n    | undefined;\n  children: (context: {\n    xStartIndex: number;\n    xEndIndex: number;\n    xScale: Scale;\n    yScale: Scale;\n    gapRatio: number;\n    activeId?: string;\n    focusedItemInfo: Info;\n    hoveredItemInfo?: Info;\n    groupWidth: number;\n    isPointInsideMarquee: ((id: K, point: { x: number; y: number }) => boolean) | undefined;\n    getTextDimensions?: (text: string, style: Record<string, any>) => Dimension;\n    defaultFontSize: string;\n    colors: string[];\n  }) => VNode;\n  offset: number;\n  series: ChartSeriesData<K, D>[];\n  isRtl: boolean;\n  renderGridLinesInFront: boolean;\n  isDataXAxis?: boolean;\n  getMarkerInfo: (\n    seriesIndex: number,\n    groupIndex: number\n  ) => { color: Property.Color | undefined; type?: MarkerShapes };\n  defaultOverviewContentRenderer: () => ComponentChildren;\n} & Omit<ChartCommonProps<K, D>, 'highlightedIds' | 'hoverBehavior' | 'selectedIds'>;\n\nexport function Chart<\n  K extends string | number,\n  D extends LineAreaItem<K> | ScatterItem<K> | BarItemData<K>\n>({ width, height, ...props }: ChartProps<K, D>) {\n  // TODO: reevaluate how we handle empty data\n  const {\n    isOverview,\n    overviewRenderer,\n    yAxisSize,\n    width: overviewWidth,\n    height: overviewHeight\n  } = useOverviewContext();\n\n  let chartWidth = width;\n  let chartHeight = height;\n\n  if (chartWidth === undefined && isOverview && overviewWidth !== undefined) {\n    chartWidth = `${overviewWidth}px`;\n  }\n\n  if (chartHeight === undefined && isOverview && overviewHeight !== undefined) {\n    chartHeight = `${overviewHeight}px`;\n  }\n\n  return (\n    <TrackResizeContainer width={chartWidth} height={chartHeight} class={dimensionStyle}>\n      {(width, height) =>\n        width || height ? (\n          <ChartWithDimensions\n            width={width}\n            height={height}\n            {...props}\n            yAxisSize={yAxisSize}\n            isOverview={isOverview}\n            overviewRenderer={overviewRenderer}\n          />\n        ) : undefined\n      }\n    </TrackResizeContainer>\n  );\n}\n"],"names":["getNextGroup","info","viewportEndIndex","isGroupNavigable","groupIndex","getPreviousGroup","OverviewBackground","x","width","height","y","windowX","windowHeight","windowWidth","windowY","_jsxs","jsxs","_Fragment","children","_jsx","jsx","Math","max","class","styles","overviewBackground","OVERVIEW_GAP","chartVars","getChartVars","ChartWithDimensions","selectedIds","hiddenIds","hideAndShowBehavior","orientation","xAxis","yAxis","plotArea","dragMode","series","groups","isStacked","getDataItem","selectionMode","drilling","dataCursorPosition","onSelectionChange","isDataCursorEnabled","dataCursorStyle","onViewportChange","onDataCursorPositionChange","onItemDrill","onGroupDrill","onItemHover","onItemFocus","datatip","zoomAndScroll","offset","getNavUtil","getDataItemPos","getGapRatio","valueFormats","findNearest","getMarkerInfo","isRtl","testId","renderGridLinesInFront","isDataXAxis","contextMenuConfig","overview","defaultOverviewContentRenderer","isOverview","yAxisSize","overviewRenderer","props","testIdProps","useTestId","rootRef","useRef","isTestEnv","undefined","isHoriz","xAxisPosition","yAxisPosition","getAxesPosition","resolvedVars","cssContent","useCssVars","colors","Array","from","map","_","index","textMeasureContent","getTextDimensions","useTextDimensions","availSpace","getAvailSpace","w","gaps","getOuterGaps","isTimeAxis","timeAxisType","updatedSpace","getScrollBarSpace","scrollDims","locale","useUser","_width","_height","labelFontSize","layoutInfo","useMemo","hiddenSet","Set","getLayoutInfo","xProps","xScale","xViewportExtent","xAxisExtent","xIndexExtent","xAxisMinExtent","yViewportExtent","yAxisExtent","groupWidth","yProps","yScale","yMaxDim","yMajorTicks","xMajorTicks","yMinorTicks","xMinorTicks","plotAreaSpace","xSpace","ySpace","idToDataMap","formatAxisLabel","formatYValue","updateScrollBarSpace","gapRatio","startIndex","endIndex","getNextChartItem","renderedGroupsIndex","tickLabels","getNextNavGroup","getDefaultNavGroup","renderedGroups","groupsDrilling","length","arrow","nextGroup","getGroupNavUtil","ignoreSelectPointerUp","cursor","yAxisCursor","marqueeProps","marqueeContent","toggleButtonContent","isPointInsideMarquee","mode","useChartMarquee","chartWidth","isMultiSelection","isZoomScroll","getDataById","id","get","viewportMax","viewportMin","touchResponse","touchResponseStyle","useVisTouchResponse","type","supportsTouchDragGestures","activeId","focusedItemInfo","hoveredItemInfo","focusedGroupInfo","navProps","onFocusUpdate","useChartNav","tooltipContent","tooltipProps","getTextAndBounds","text","setText","useState","bounds","useTooltip","position","calculateOffset","current","mergeProps","onPointerMove","event","textAndBounds","target","useTextTruncation","dataSet","getElementData","title","titleProps","dims","parseInt","isFocusVisible","group","name","viewportProps","useChartViewport","selectDrillProps","selectionContent","useSelectDrill","selection","onChange","ignoreAsTrigger","dataset","findNearestData","getDataItemPosition","datatipDisabled","setDatatipDisabled","datatipContent","dataCursorContent","datatipProps","datatipAriaDescribedby","useChartDatatipAndCursor","isDisabled","hasXYValues","plotAreaClipPathId","useId","xStartIndex","xEndIndex","gridLines","Gridlines","isLog","scale","yTicks","xTicks","hasData","contextMenuContent","contextMenuProps","useChartContextMenu","xAxisTitle","yAxisTitle","onContextMenuDismissed","gesture","dragOver","setDragOver","accepted","draggable","dndProps","dndContent","useChartDnd","onDrag","onDragStart","onDragEnd","onDragEnter","onDragLeave","onDragOver","onDrop","itemsDraggable","groupDraggable","eventsProps","overviewContentRenderer","renderer","background","slidingWindow","tabIndex","ref","merge","style","role","className","baseChartStyle","ceil","PlotArea","color","dragOverStyle","hasAxisLine","Axis","axisPosition","isTextInteractive","groupDrill","focusedGroupIndex","defaultFontSize","ScrollBar","viewport","axisExtent","OverviewContext","Provider","value","overviewChartPlotArea","overviewXScale","windowCoords","xDomain","min","xRange","ScaleLinear","yDomain","yRange","transform","abs","getWindowCoords","hasHandles","OverviewSlidingWindow","onWindowDimsChange","updateViewportFromOverview","deltaX","deltaWidth","getRenderer","overviewWidth","overviewHeight","useOverviewContext","chartHeight","TrackResizeContainer","dimensionStyle"],"mappings":"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"}