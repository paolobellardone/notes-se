{"version":3,"file":"TabBar-39589251.js","sources":["../../src/UNSAFE_TabBar/TabBar.tsx"],"sourcesContent":["import { ComponentChildren } from 'preact';\nimport { useRef } from 'preact/hooks';\nimport { TabBarContext, TabBarLayout } from '../UNSAFE_TabBarCommon';\nimport { styles } from './themes/TabBarStyles.css';\nimport { TestIdProps } from '../hooks/UNSAFE_useTestId';\nimport { useTabBar } from '../hooks/PRIVATE_useTabBar';\nexport {\n  TabBarItem,\n  RemovableTabBarItem,\n  OverflowTabBarItem,\n  TabBarContext,\n  TabBarLayout\n} from '../UNSAFE_TabBarCommon';\n\n/**\n * type for payload of current key change event handler\n */\nexport type CurrentKeyDetail<K> = {\n  value: K;\n};\n\n/**\n * type for payload of selection change event handler\n */\ntype SelectionDetail<K> = {\n  value: K;\n};\n\n/**\n * type for payload of remove event handler\n */\ntype RemoveDetail<K> = {\n  value: K;\n};\n\ntype DisplayProps =\n  | {\n      /**\n       * Controls the content layout of the TabBarItem: 'standard' lays out the contents horizontally,\n       *'icons' hides the label,\n       */\n      display?: 'standard' | 'icons';\n      /**\n       *  The size indicates how tall the TabBarItem is rendered.\n       */\n      size?: 'md' | 'lg';\n    }\n  | {\n      /**\n       *'stacked' stacks the icon on top of the label.\n       * Note: It is not possible to specify 'size' when 'display=\"stacked\".\n       */\n      display?: 'stacked';\n      size?: 'never';\n    };\n\nexport type TabBarProps<K extends string | number> = DisplayProps & {\n  /**\n   * A set of TabBarItem(s) that TabBar will hold\n   */\n  children: ComponentChildren;\n  /**\n   * Whether to stretch the tab bar items to occupy available space or to condense items\n   */\n  layout?: 'stretch' | 'condense';\n  /**\n   * The position of the TabBar. Valid Values: top and bottom.\n   * 'top' is used when TabBar is placed on top of content section and the selection\n   *  indicator would be placed below the TabBarItem.\n   * 'bottom' is used when TabBar is placed on bottom of content section and the selection\n   *  indicator would be placed above the TabBarItem.\n   */\n  edge?: 'top' | 'bottom';\n  /**\n   * Key of the selected item.\n   */\n  selection?: K;\n  /**\n   * Callback function to handle when user selects a tab.\n   * The callback is also invoked when a user selects a tab that is already selected.\n   */\n  onSelect?: <K extends string | number>(detail: SelectionDetail<K>) => void;\n  /**\n   * Callback function to handle remove\n   */\n  onRemove?: <K extends string | number>(detail: RemoveDetail<K>) => void;\n  /**\n   * An aria-label which defines a string value that labels this TabBar.\n   * Either aria-label or aria-labelledby should be specified in order to make TabBar accessible.\n   */\n  'aria-label'?: string;\n\n  /**\n   * An aria-labelledby which identifies the element(s) that labels this TabBar.\n   * Either aria-label or aria-labelledby should be specified in order to make TabBar accessible.\n   */\n  'aria-labelledby'?: string;\n};\n\nexport function TabBar<K extends string | number>({\n  children,\n  layout = 'stretch',\n  display = 'standard',\n  size = 'md',\n  edge = 'top',\n  selection,\n  onSelect,\n  onRemove,\n  'aria-label': ariaLabel,\n  'aria-labelledby': ariaLabelledby\n}: TabBarProps<K> & TestIdProps) {\n  const rootRef = useRef<HTMLDivElement>(null);\n\n  const { rootProps, tabBarContext } = useTabBar({\n    class: styles.tabBarBase,\n    edge: edge,\n    onRemove,\n    onSelect,\n    ref: rootRef,\n    selection,\n    size,\n    children\n  });\n  return (\n    <TabBarContext.Provider value={tabBarContext}>\n      <div aria-label={ariaLabel} aria-labelledby={ariaLabelledby} {...rootProps}>\n        <TabBarLayout layout={layout} display={display}>\n          {children}\n        </TabBarLayout>\n      </div>\n    </TabBarContext.Provider>\n  );\n}\n"],"names":["children","layout","display","size","edge","selection","onSelect","onRemove","ariaLabel","ariaLabelledby","rootRef","useRef","rootProps","tabBarContext","useTabBar","class","styles","tabBarBase","ref","_jsx","jsx","TabBarContext","Provider","value","TabBarLayout"],"mappings":"ilCAmGgB,UAAkCA,SAChDA,EAAQC,OACRA,EAAS,UAASC,QAClBA,EAAU,WAAUC,KACpBA,EAAO,KAAIC,KACXA,EAAO,MAAKC,UACZA,EAASC,SACTA,EAAQC,SACRA,EACA,aAAcC,EACd,kBAAmBC,IAEnB,MAAMC,EAAUC,SAAuB,OAEjCC,UAAEA,EAASC,cAAEA,GAAkBC,YAAU,CAC7CC,MAAOC,EAAMA,OAACC,WACdb,KAAMA,EACNG,WACAD,WACAY,IAAKR,EACLL,YACAF,OACAH,aAEF,OACEmB,EAAAC,IAACC,EAAaA,cAACC,SAAS,CAAAC,MAAOV,EAC7Bb,SAAAmB,EAAAA,IAAA,MAAA,CAAA,aAAiBX,EAAS,kBAAmBC,KAAoBG,EAC/DZ,SAAAmB,EAAAC,IAACI,eAAY,CAACvB,OAAQA,EAAQC,QAASA,WACpCF,OAKX"}