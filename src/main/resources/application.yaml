#
# MIT License
#
#  Copyright (c) 2022, 2024 PaoloB
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#

server:
  port: 8081
  host: 0.0.0.0
  features:
     observe:
        observers:
           health:
              details: true

db:
  source: jdbc
  connection:
    url: jdbc:oracle:thin:@atp23ai_low
    username: demos
    # Specify password using one of the following methods:
    # - java command line parameter: -Ddb.connection.password=database_password (it does not work if the password has "strange" characters such as !)
    # - enviroment variable: DB_CONNECTION_PASSWORD=database_password (preferred)
    # - uncomment the following line and put the password there
    #password:
    poolName: oracle
    initializationFailTimeout: -1
    connectionTimeout: 10000
    helidon:
      pool-metrics:
        enabled: true
        # name prefix defaults to "db.pool." - if you have more than one client within a JVM, you may want to distinguish between them
        name-prefix: "hikari."
  health-check:
    type: "query"
    statementName: "health-check"
  services:
    tracing:
      - enabled: true
      # would trace all statement names that start with select-
      - statement-names: ["select-.*", "insert-.*", "update-.*"]
      # would trace all delete statements
      - statement-types: ["DELETE"]
    metrics:
      - type: TIMER
        errors: false
        statement-names: ["select-.*"]
        description: "Timer for successful selects"
      - type: COUNTER
        errors: false
        statement-types: ["DELETE", "UPDATE", "INSERT", "DML"]
        name-format: "db.counter.%s.success"
        description: "Counter of successful DML statements"
      - type: COUNTER
        statement-types: ["DELETE", "UPDATE", "INSERT", "DML"]
        success: false
        name-format: "db.counter.%s.error"
        description: "Counter of failed DML statements"
  statements:
    # Health check query statement for Oracle database
    health-check: "SELECT 1 FROM DUAL"
    # Ping statement
    ping: "SELECT 1 FROM DUAL"
    # Drop table
    drop-notes: "DROP TABLE note CASCADE CONSTRAINT PURGE"
    # Create database schema
    create-notes: "CREATE TABLE note (id NUMBER NOT NULL, name VARCHAR2(100), contents VARCHAR2(1000), CONSTRAINT notes_pk PRIMARY KEY(id))"
    # Select all notes
    select-all-notes: "SELECT id, name, contents FROM note"
    # Select note by id
    select-note-by-id: "SELECT id, name, contents FROM note WHERE id = :id"
    # Insert records into database
    insert-note: "INSERT INTO note(id, name, contents) VALUES(?, ?, ?)"
    # Delete note by id
    delete-note-by-id: "DELETE FROM note WHERE id = :id"
    # Update note by id
    update-note-by-id: "UPDATE note SET name = :name, contents = :contents WHERE id = :id"
