{"version":3,"file":"FilePickerWebElement.js","sourceRoot":"","sources":["FilePickerWebElement.ts"],"names":[],"mappings":"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","sourcesContent":["import { FilePickerWebElementBase } from './FilePickerWebElementBase';\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport { WebDriver } from 'selenium-webdriver';\nimport { whenBusyContextReady } from '@oracle/oraclejet-webdriver/lib/busy-context-utils';\n\n/**\n * The component WebElement for [oj-c-file-picker](../../../oj-c/docs/oj.FilePicker.html).\n * Do not instantiate this class directly, instead, use\n * [findFilePicker](../functions/findFilePicker.html).\n */\nexport class FilePickerWebElement extends FilePickerWebElementBase {\n  /**\n   * Takes an Array of objects containing file paths + types.\n   * These files will be read from the local filesystem and then sent\n   * to the oj-file-picker to simulate user file selection. Only the basename of\n   * the file will be sent, not the entire path to make it consistent with how\n   * the browser sets the value.\n   * @param files An array of objects containing the path and type of selected files\n   */\n  async doSelect(files: Array<{ path: string; type: string }>) {\n    await FilePickerWebElement.setupPickFiles(this.getDriver(), files);\n\n    await this.getDriver().executeScript(`arguments[0].firstChild.click();`, this);\n\n    await this.whenBusyContextReady();\n  }\n\n  /**\n   * This method should be called right before ojfilepickerutils.pickFiles\n   * Takes the webdriver and an Array of objects containing file paths + types.\n   * These files will be read from the local filesystem and then sent\n   * to the pickFiles method to simulate user file selection. Only the basename of\n   * the file will be sent, not the entire path to make it consistent with how\n   * the browser sets the value.\n   * @param driver the Webdriver of the test\n   * @param files An array of objects containing the path and type of selected files\n   */\n  static async setupPickFiles(driver: WebDriver, files: Array<{ path: string; type: string }>) {\n    await whenBusyContextReady(driver);\n    //create a buffer with the files\n    const dataList = files.map(({ path: filePath, type }) => {\n      const fileSizeInMB = fs.statSync(filePath).size / (1024 * 1024);\n      const numberChunks = Math.ceil(fileSizeInMB / 8);\n      const fileContent = Array.from(fs.readFileSync(filePath));\n      const chunkSize = Math.floor(fileContent.length / numberChunks);\n      const fileChunks = [];\n      for (let i = 0; i < numberChunks; i++) {\n        if (i + 1 == numberChunks) {\n          fileChunks.push(fileContent.slice(i * chunkSize));\n        } else {\n          fileChunks.push(fileContent.slice(i * chunkSize, (i + 1) * chunkSize));\n        }\n      }\n\n      return {\n        bytes: fileChunks, //split it into 8MB chunks\n        path: path.basename(filePath),\n        type,\n        numberChunks\n      };\n    });\n\n    for (let i = 0; i < dataList.length; i++) {\n      const { bytes, path, type, numberChunks } = dataList[i];\n      for (let j = 0; j < bytes.length; j++) {\n        const file = {\n          bytes: bytes[j],\n          path,\n          type,\n          numberChunks,\n          chunkNumber: j,\n          fileNumber: i\n        };\n        await driver.executeScript(\n          `const file = arguments[0];\n           const chunkNumber = file.chunkNumber;\n           var data = {\n            bytes: file.bytes,\n            path: file.path,\n            type: file.type\n           }\n           if (chunkNumber == 0) {\n            window['_file' + file.fileNumber] = [data];\n           } else {\n            window['_file' + file.fileNumber].push(data);\n           }`,\n          file\n        );\n      }\n    }\n\n    driver.executeScript(\n      `const numFiles = arguments[0];\n      const list = [];\n      for ( let i = 0; i < numFiles; i++) {\n        const file = window['_file' + i];\n        delete window['_file' + i];\n        list.push({\n          bytes: file.map(chunk => chunk.bytes).join(''),\n          path: file[0].path,\n          type: file[0].type\n        });\n      }\n      const fileList = list.map((data) => {\n        return new File([Uint8Array.from(data.bytes)], data.path, {type: data.type});\n       })\n       // Only if setupPickFiles has not been called yet\n       if (!HTMLInputElement.prototype._pickerTestData) {\n        //Save the native click method\n        const clickMethod = HTMLInputElement.prototype.click;\n        //Overwrite the click method\n        HTMLInputElement.prototype.click = function() {\n          const event = new CustomEvent(\"change\");\n          this.dispatchEvent(event);\n          delete HTMLInputElement.prototype._pickerTestData;\n          HTMLInputElement.prototype.click = clickMethod;\n        }\n       }\n       HTMLInputElement.prototype._pickerTestData = fileList;\n       `,\n      dataList.length\n    );\n  }\n}\n"]}